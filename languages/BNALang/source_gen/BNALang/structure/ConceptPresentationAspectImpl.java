package BNALang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Asset;
  private ConceptPresentation props_Attribute;
  private ConceptPresentation props_Parameter;
  private ConceptPresentation props_Participant;
  private ConceptPresentation props_SmartContract;
  private ConceptPresentation props_Transaction;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Asset:
        if (props_Asset == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Participants deal with assets");
          cpb.presentationByName();
          props_Asset = cpb.create();
        }
        return props_Asset;
      case LanguageConceptSwitch.Attribute:
        if (props_Attribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Attributes are part of Assets, Participants and Transactions");
          cpb.presentationByName();
          props_Attribute = cpb.create();
        }
        return props_Attribute;
      case LanguageConceptSwitch.Parameter:
        if (props_Parameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Functions have parameters");
          cpb.presentationByName();
          props_Parameter = cpb.create();
        }
        return props_Parameter;
      case LanguageConceptSwitch.Participant:
        if (props_Participant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Participants are the users or the customer of a given contract");
          cpb.presentationByName();
          props_Participant = cpb.create();
        }
        return props_Participant;
      case LanguageConceptSwitch.SmartContract:
        if (props_SmartContract == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Smart contract for the BNA file");
          cpb.presentationByName();
          props_SmartContract = cpb.create();
        }
        return props_SmartContract;
      case LanguageConceptSwitch.Transaction:
        if (props_Transaction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Transaction = cpb.create();
        }
        return props_Transaction;
    }
    return null;
  }
}
